using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml;
using CSKernelClient;

namespace CSReportDll
{

    public class cReportConnect
    {

        private const String C_MODULE = "cReportConnect";

        private const String C_RPTCONNECT = "RptConnect";
        private const String C_RPTCOLUMNS = "Columns";
        private const String C_RPTPARAMETERS = "Parameters";

        private String m_strConnect = "";
        private String m_dataSource = "";
        private csDataSourceType m_dataSourceType;

        private cParameters m_parameters = new cParameters();
        private cColumnsInfo m_columns = new cColumnsInfo();

        private int m_connectionTimeout = 0;
        private int m_commandTimeout = 0;

        public int getConnectionTimeout()
        {
            return m_connectionTimeout;
        }

        public void setConnectionTimeout(int rhs)
        {
            m_connectionTimeout = rhs;
        }

        public int getCommandTimeout()
        {
            return m_commandTimeout;
        }

        public void setCommandTimeout(int rhs)
        {
            m_commandTimeout = rhs;
        }

        public String getStrConnect()
        {
            return m_strConnect;
        }

        public void setStrConnect(String rhs)
        {
            m_strConnect = rhs;
        }

        public String getDataBase()
        {
            return getXFromStrConnect(m_strConnect, "Initial Catalog=");
        }

        public String getServer()
        {
            return getXFromStrConnect(m_strConnect, "Data Source=");
        }

        public String getUser()
        {
            return getXFromStrConnect(m_strConnect, "User ID=");
        }

        public String getPassword()
        {
            return getXFromStrConnect(m_strConnect, "Password=");
        }

        public String getDataSource()
        {
            return m_dataSource;
        }

        public void setDataSource(String rhs)
        {
            m_dataSource = rhs;
        }

        public csDataSourceType getDataSourceType()
        {
            return m_dataSourceType;
        }

        public void setDataSourceType(csDataSourceType rhs)
        {
            m_dataSourceType = rhs;
        }

        public cParameters getParameters()
        {
            return m_parameters;
        }

        public void setParameters(cParameters rhs)
        {
            m_parameters = rhs;
        }

        public cColumnsInfo getColumns()
        {
            return m_columns;
        }

        public void setColumns(cColumnsInfo rhs)
        {
            m_columns = rhs;
        }

        public String getSqlParameters()
        {
            String s = "";
            cParameter param = null;
            for (int _i = 0; _i < m_parameters.count(); _i++)
            {
                param = m_parameters.item(_i);
                switch (param.getTypeColumn())
                {
                    case CSDataBase.csDataType.CSTDWCHAR:
                        /*
                            case  CSDataBase.csDataType.CSTDVARWCHAR:
                            case  CSDataBase.csDataType.CSTDVARCHAR:
                            case  CSDataBase.csDataType.CSTDLONGVARWCHAR:
                            case  CSDataBase.csDataType.CSTDLONGVARCHAR:
                            case  CSDataBase.csDataType.CSTDCHAR:
                         */
                        s = s + "'" + param.getValue().Replace("'", "''") + "',";
                        break;
                    case CSDataBase.csDataType.CSTDTINYINT:
                    case CSDataBase.csDataType.CSTDUNSIGNEDTINYINT:
                    case CSDataBase.csDataType.CSTDSMALLINT:
                    case CSDataBase.csDataType.CSTDSINGLE:
                    case CSDataBase.csDataType.CSTDNUMERIC:
                    case CSDataBase.csDataType.CSTDINTEGER:
                    case CSDataBase.csDataType.CSTDDOUBLE:
                    /*
                        case  CSDataBase.csDataType.CSTDDECIMAL:
                        case  CSDataBase.csDataType.CSTDCURRENCY:
                    */
                    case CSDataBase.csDataType.CSTDBOOLEAN:
                    case CSDataBase.csDataType.CSTDBIGINT:
                        s = s + getNumberSql(param.getValue()) + ",";
                        break;
                    case CSDataBase.csDataType.CSTDDBTIMESTAMP:
                        /*
                        case  CSDataBase.csDataType.CSTDDBTIME:
                        case  CSDataBase.csDataType.CSTDDBDATE:
                        case  CSDataBase.csDataType.CSTDDATE:
                        */
                        s = s + cGlobals.format(param.getValue(), cGlobals.C_SQL_DATE_STRING) + ",";
                        break;
                    default:
                        cWindow.msgWarning("This data type is not codified "
                                            + param.getTypeColumn()
                                            + ". Parameter: " + param.getName()
                                            + ". Function: sqlParameters.");
                        break;
                }
            }

            if (s.Substring(s.Length - 1) == ",")
            {
                s = s.Substring(0, s.Length - 1);
            }

            return s;
        }

        internal bool load(CSXml.cXml xDoc, XmlElement nodObj)
        {
            XmlElement nodObjAux = null;
            XmlElement nodObjAux2 = null;

            m_dataSource = xDoc.getNodeProperty(nodObj, "DataSource").getValueString(eTypes.eText);
            m_dataSourceType = (csDataSourceType)xDoc.getNodeProperty(nodObj, "DataSourceType").getValueInt(eTypes.eInteger);
            m_strConnect = xDoc.getNodeProperty(nodObj, "StrConnect").getValueString(eTypes.eText);

            nodObjAux2 = xDoc.getNodeFromNode(nodObj, C_RPTCOLUMNS);

            if (xDoc.nodeHasChild(nodObjAux2))
            {
                nodObjAux = xDoc.getNodeChild(nodObjAux2);
                while (nodObjAux != null)
                {
                    String key = xDoc.getNodeProperty(nodObjAux, "Key").getValueString(eTypes.eText);
                    if (!m_columns.add(null, key).load(xDoc, nodObjAux))
                    {
                        return false;
                    }
                    nodObjAux = xDoc.getNextNode(nodObjAux);
                }
            }

            nodObjAux2 = xDoc.getNodeFromNode(nodObj, C_RPTPARAMETERS);

            if (xDoc.nodeHasChild(nodObjAux2))
            {
                nodObjAux = xDoc.getNodeChild(nodObjAux2);
                while (nodObjAux != null)
                {
                    String key = xDoc.getNodeProperty(nodObjAux, "Key").getValueString(eTypes.eText);
                    if (!m_parameters.add(null, key).load(xDoc, nodObjAux))
                    {
                        return false;
                    }
                    nodObjAux = xDoc.getNextNode(nodObjAux);
                }
            }

            return true;
        }

        internal bool save(CSXml.cXml xDoc, XmlElement nodeFather)
        {
            CSXml.cXmlProperty xProperty = null;
            XmlElement nodObj = null;
            XmlElement nodObjAux = null;
            xProperty = new CSXml.cXmlProperty();

            xProperty.setName(C_RPTCONNECT);

            if (nodeFather != null)
            {
                nodObj = xDoc.addNodeToNode(nodeFather, xProperty);
            }
            else
            {
                nodObj = xDoc.addNode(xProperty);
            }

            xProperty.setName("DataSource");
            xProperty.setValue(eTypes.eText, m_dataSource);
            xDoc.addPropertyToNode(nodObj, xProperty);

            xProperty.setName("DataSourceType");
            xProperty.setValue(eTypes.eInteger, m_dataSourceType);
            xDoc.addPropertyToNode(nodObj, xProperty);

            xProperty.setName("StrConnect");
            xProperty.setValue(eTypes.eText, m_strConnect);
            xDoc.addPropertyToNode(nodObj, xProperty);

            nodObjAux = nodObj;

            xProperty.setName(C_RPTCOLUMNS);
            nodObj = xDoc.addNodeToNode(nodObj, xProperty);

            cColumnInfo col = null;
            for (int _i = 0; _i < m_columns.count(); _i++)
            {
                col = m_columns.item(_i);
                if (!col.save(xDoc, nodObj))
                {
                    return false;
                }
            }

            nodObj = nodObjAux;

            xProperty.setName(C_RPTPARAMETERS);
            nodObj = xDoc.addNodeToNode(nodObj, xProperty);

            cParameter param = null;
            for (int _i = 0; _i < m_parameters.count(); _i++)
            {
                param = m_parameters.item(_i);
                if (!param.save(xDoc, nodObj))
                {
                    return false;
                }
            }

            return true;
        }

        private String getNumberSql(String number)
        {
            if (!G.isNumeric(number))
            {
                return "0";
            }
            else
            {
                number = cGlobals.format(number, (new String('#', 27)) + "0." + (new String('#', 28)));
                number = number.Replace(",", ".");
                if (number.Substring(number.Length - 1) == ".")
                {
                    number = number.Substring(0, number.Length - 1);
                }
                return number;
            }
        }

        private String getXFromStrConnect(String strConnect, String x)
        {
            int i = 0;
            int p = 0;

            if (x.Substring(x.Length - 1) != "=")
            {
                x = x + "=";
            }
            i = strConnect.IndexOf(x, 0);
            if (i > 0)
            {
                p = strConnect.IndexOf(";", i);
                if (p == 0)
                {
                    p = strConnect.Length + 1;
                }
                i = i + x.Length;
                return strConnect.Substring(i, p - i);
            }
            else
            {
                return "";
            }
        }

    }

}
